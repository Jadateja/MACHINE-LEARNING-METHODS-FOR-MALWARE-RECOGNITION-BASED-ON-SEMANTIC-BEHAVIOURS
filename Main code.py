import pygal
from flask import Flask, render_template, request, session, url_for, Response
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,precision_score,recall_score
from sklearn.svm import SVC
import sys,os,string
from sklearn.decomposition import PCA
from sklearn.preprocessing import normalize
import matplotlib.pyplot as plt
from collections import Counter
from imblearn.over_sampling import SMOTE
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import tensorflow as tf
# from keras.models import Sequential
from keras.layers import Dense, LSTM, Bidirectional, Dropout
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
def f(x_train,x_test, y_train, y_test):
global X_trains,X_tests,y_trains,y_tests
X_trains = pd.DataFrame(x_train)
X_tests = pd.DataFrame(x_test)
y_trains = pd.DataFrame(y_train)
y_tests = pd.DataFrame(y_test)
filepath=os.getcwd()
app=Flask( name )
@app.route('/')
def index():
return render_template("index.html")
@app.route('/Upload')
def UploadDataset():
return render_template("UploadDataset.html")
@app.route('/uploaddataset',methods=["POST","GET"])
def uploaddataset_csv_submitted():
if request.method == "POST":
csvfile = request.files['csvfile']
result = csvfile.filename
filepath.replace("\\","/")
file = filepath +"\\" + result
print(file)
session['filepath'] = file
return render_template('uploaddataset.html',msg='sucess')
return render_template('uploaddataset.html')

@app.route("/preprocessing")
def preproceesing():
global df_pca
X=x.drop(["legitimate","ID",'md5','Machine'],axis=1)
print("X")
print(X)
print("Y")
X=normalize(X, axis=0)
print("pooooooooooooooo")
print(X)
pca = PCA()
df_pca = pca.fit_transform(X)
df_pca=pd.DataFrame(data=df_pca)
variance_exp_cumsum = pca.explained_variance_ratio_.cumsum().round(2)
fig, axes = plt.subplots(1, 1, figsize=(16, 7), dpi=100)
plt.plot(variance_exp_cumsum, color='firebrick')
plt.xlabel("number of components")
plt.ylabel("cumilative explained")
#plt.savefig('D:\\rupesh\\malware detection\\demo.png')
df_pca=df_pca.iloc[:,0:12]
print("!!!!!!!!!!!!!!!!!!!!!!!!")
print(df_pca)
print("@@@@@@@@@@@@@@")
var=variance_exp_cumsum[12]
return render_template('preprocessing.html', msg='sucess',var=var)
@app.route('/Train')
def TrainDataset():
return render_template("traintestdataset.html")
@app.route('/modelperformance')
def modelperformances():
return render_template('modelperformance.html')
@app.route('/modelperformance',methods=["POST","GET"])
def selected_model_submitted():
global accuracyscore,precisionscore,recallscore
if request.method == "POST":
selectedalg =int(request.form['algorithm'])
if (selectedalg == 1):
model = SVC()
sm=SMOTE()
global X_trains_sm, y_trains_sm, X_tests, y_tests,X_trains, y_trains
X_trains_sm, y_trains_sm=sm.fit_resample(X_trains, y_trains)
model.fit( X_trains_sm, y_trains_sm)
y_pred = model.predict(X_tests)
accuracyscore = accuracy_score(y_tests, y_pred)
precisionscore = precision_score(y_tests, y_pred, average='macro')
recallscore = recall_score(y_tests, y_pred, average='macro')

return render_template('modelperformance.html', msg="accuracy_score",
score=accuracyscore,

model="SupportVectorMachine")

elif (selectedalg == 2):
X_trains_sm = tf.convert_to_tensor(X_trains_sm, dtype=tf.float32)
y_trains_sm = tf.convert_to_tensor(y_trains_sm, dtype=tf.float32)
X_tests = tf.convert_to_tensor(X_tests, dtype=tf.float32)
y_tests = tf.convert_to_tensor(y_tests, dtype=tf.float32)
model = Sequential()
model.add(Dense(30, activation='relu'))
model.add(Dense(20, activation='relu'))
model.add(Dense(1, activation='softmax'))
model.compile(optimizer='adam', loss='categorical_crossentropy',
metrics=['accuracy'])
model.fit(X_trains_sm, y_trains_sm, batch_size=500, epochs=10,
validation_data=(X_tests, y_tests))
y_pred = model.predict(X_tests)
accuracyscore = accuracy_score(y_tests, y_pred)
precisionscore = precision_score(y_tests, y_pred, average='macro')
recallscore = recall_score(y_tests, y_pred, average='macro')
return render_template('modelperformance.html', msg="accuracy_score",
score=accuracyscore,model="CNN")
elif (selectedalg == 3):
n_future = 10
n_past = 30
model = Sequential()
model.add(Bidirectional(LSTM(units=10,
activation="relu",
return_sequences=True,
input_shape=(X_trains_sm.shape[1], 1))))
model.add(LSTM(units=10, return_sequences=True))
model.add(LSTM(units=10, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=10))
model.add(Dense(units=n_future, activation="relu"))
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics='acc
uracy')
model.fit(X_trains_sm, y_trains_sm,epochs=50,verbose=1, )
y_pred = model.predict(X_tests)
accuracyscore = accuracy_score(y_tests, y_pred)
precisionscore = precision_score(y_tests, y_pred, average='macro')
recallscore = recall_score(y_tests, y_pred, average='macro')
return render_template('modelperformance.html', msg="accuracy_score",
score=accuracyscore,model="LSTM")
elif (selectedalg == 4):
model = DecisionTreeClassifier()
sm = SMOTE()
X_trains_sm, y_trains_sm = sm.fit_resample(X_trains, y_trains)
model.fit(X_trains_sm, y_trains_sm)
y_pred = model.predict(X_tests)

accuracyscore = accuracy_score(y_tests, y_pred)
precisionscore = precision_score(y_tests, y_pred, average='macro')
recallscore = recall_score(y_tests, y_pred, average='macro')
return render_template('modelperformance.html', msg="accuracy_score",
score=accuracyscore,model="DecisionTreeClassifier")
elif (selectedalg == 5):
model = XGBClassifier()
sm = SMOTE()
X_trains_sm, y_trains_sm = sm.fit_resample(X_trains, y_trains)
model.fit(X_trains_sm, y_trains_sm)
y_pred = model.predict(X_tests)
accuracyscore = accuracy_score(y_tests, y_pred)
precisionscore = precision_score(y_tests, y_pred, average='macro')
recallscore = recall_score(y_tests, y_pred, average='macro')
return render_template('modelperformance.html', msg="accuracy_score",
score=accuracyscore,model="XGBClassifier")
return render_template('modelperformance.html')
@app.route("/view")
def ViewDatset():
session_var_value=session.get("filepath")
df=pd.read_csv(session_var_value)
global x
x=pd.DataFrame(df)
x=x.sample(5000, axis=0, replace=False)
x2=x.sample(500,axis=0,replace=False)
x=x.dropna(how="any",axis=0)
x2=x2.dropna(how="any",axis=0)
return render_template("viewdataset.html",col=x2.columns.values,
row_val=list(x2.values.tolist()),zip=zip)
@app.route('/traintestdataset',methods=["POST","GET"])
def traintestdataset_submitted():
if request.method == "POST":
print("hello")
value = request.form['traintestvalue']
value1=(value)
df1=x
#X = df1.drop("legitimate",axis=1)
y = df1['legitimate']
X_train, X_test, y_train, y_test =
train_test_split(df_pca,y,test_size=float(value1))
print("################")
print(X_train)
print("1")
print(y_train)
print("2")
print(y_test)
print("$$$$$$$")
f(X_train,X_test, y_train, y_test)

X_train1 = pd.DataFrame(X_train)
X_trainlen=len(X_train)
y_test1 = pd.DataFrame(y_test)
y_testlen = len(y_test)
return
render_template('traintestdataset.html',msg='sucess',data=X_train1.to_html(),X_trainl
envalue=X_trainlen,y_testlenval=y_testlen)
return render_template('traintestdataset.html')
@app.route('/prediction', methods=["POST","GET"])
def prediction():
print("hello")
if request.method == "POST":
url = request.form['char']
age = request.form['version1']
length = request.form['data']
traffic = request.form['version']
anchor = request.form['size']
machine = request.form['machine']
uninitialised = request.form['uninitialised']
major = request.form['major']
minor = request.form['minor']
enter = request.form['enter']
entry = request.form['entry']
base= request.form['base']
list1=([int(url),int(age),int(length),int(traffic),int( anchor),int(machine),int(uniniti
alised),int(major),int(minor),int(enter),int(entry),int(base)])
global X_trains_sm, y_trains_sm, X_tests, y_tests
model=SVC()
model.fit(X_trains_sm, y_trains_sm)
print("predictions")
print(X_trains)
print("y_train")
print(y_trains)
predi = model.predict([list1])
pre = predi
print(pre)
return render_template('prediction.html',msg='predictsucess',predvalue=pre)
return render_template('prediction.html')

@app.route("/pie_chart")
def pie_chart():
pie_chart = pygal.Pie()
pie_chart.title = 'Machine learning technique to detect behavior based malware
(in%)'
pie_chart.add('AccuracyScore', accuracyscore)
pie_chart.add('PrecisionScore', precisionscore)

pie_chart.add('RecallScore',recallscore)
pie_data=pie_chart.render_data_uri()
return render_template('pie_chart.html',pie_data=pie_data)

if name ==' main ':
app.secret_key = ".."
app.run(debug=True)

'''variance_exp_cumsum = pca.explained_variance_ratio_.cumsum().round(2)
fig, axes = plt.subplots(1,1,figsize=(16,7), dpi=100)
plt.plot(variance_exp_cumsum, color='firebrick')
plt.title('Screeplot of Variance Explained %', fontsize=22)
plt.xlabel('# of PCs', fontsize=16)
plt.show()
'''
